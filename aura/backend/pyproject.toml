[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aura-backend"
version = "0.1.0"
description = "Aura privacy-first AI assistant backend with zero-knowledge architecture"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["privacy", "encryption", "ai", "assistant"]
authors = [
  { name = "Aura Team", email = "team@aura.ai" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "fastapi>=0.109.0",
  "uvicorn[standard]>=0.27.0",
  "pydantic>=2.6.0",
  "pydantic-settings>=2.1.0",
  "sqlalchemy>=2.0.25",
  "alembic>=1.13.1",
  "psycopg2-binary>=2.9.9",
  "redis>=5.0.1",
  "cryptography>=42.0.2",
  "pynacl>=1.5.0",
  "argon2-cffi>=23.1.0",
  "srp>=1.0.20",
  "python-jose[cryptography]>=3.3.0",
  "python-multipart>=0.0.9",
  "httpx>=0.26.0",
  "structlog>=24.1.0",
  "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.4",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.12.0",
  "black>=24.1.0",
  "ruff>=0.2.0",
  "mypy>=1.8.0",
  "pre-commit>=3.6.0",
  "httpx>=0.26.0",
]
test = [
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.4",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.12.0",
  "factory-boy>=3.3.0",
  "faker>=22.0.0",
]

[project.urls]
Documentation = "https://github.com/aura/aura#readme"
Issues = "https://github.com/aura/aura/issues"
Source = "https://github.com/aura/aura"

[tool.hatch.version]
path = "src/aura/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/aura tests}"

[tool.coverage.run]
source_pkgs = ["aura", "tests"]
branch = true
parallel = true
omit = [
  "src/aura/__about__.py",
]

[tool.coverage.paths]
aura = ["src/aura", "*/aura-backend/src/aura"]
tests = ["tests", "*/aura-backend/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.isort]
known-first-party = ["aura"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true